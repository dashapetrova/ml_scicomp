SOFTWARE DESIGN

SEPARATION OF CONCERNS

x = int(input("Tell me the first number: "))
y = int(input("Tell me the second number: "))
op = input("tell me the operation (add, multiply): ")

if op == "add":
  print("result: ", x+y)
elif op == "multiply":
  print("result: ", x*y)

Exercise: In the above program, identify and describe at least two of the sub-problems which are solved multiple times. (I see at least three or four.)

Getting the input data can be done in a loop so there will be no need to write three separate lines for it.
If these lines stay the same, it is possible to use print formatting to not print 'tell me the (...)' three times. The same with the "result" in the output.
Considering that there'are only two operation options it may be unnecessary to specify the operation name in "elif" (if we claim that the user doesn't input something unrelatable), so we can just use "else".
The operation names can be created as string data at the very begging (a = 'add', m = 'multiple') or as a list (ops = ['add', 'multiple']) to be used further in the code without typing the names in the input and 'if' statement.
Print of the result can be written once but first we need to save the result in a variable.

Exercise: Choose one of the sub-problems, write a common solution to that subproblem in the form of a function, and modify the program to use your common solution instead of solving the problem multiple times.

def inp_data(name):
  return input(f"Tell me the {name}: ")

x = int(inp_data('first number'))
y = int(inp_data('second number'))
op = inp_data("operation ('add', 'multiply'))")

res = x + y if op == 'add' else x * y if op == 'multiply' else 'wrong input'
print("result: ", res)


STATISTICS TOOLKIT

AWK TUTORIAL

Exercise: What if you wanted just the sum column, and didn't need the original table? Write an awk command that takes a two column table and outputs just the sum column.

STATISTICS TOOLS

Exercise: Write a python program stats-sum which reads a newline-separated list of floating-point numbers from standard input. When it reaches the end of standard input, it prints the sum, and exits.

Exercise: Write similar "aggregator" programs computing stats-mean, stats-median, stats-variance, stats-stddev (standard deviation), stats-mad (median absolute deviation). Feel free to use the standard library, but do not use any third-party python packages.

Exercise: Write a program stats; this program reads standard input and takes arguments. The arguments it takes are aggregations "mean", "median", "variance", etc. The standard input is a numeric table with tab as the column separator and newline as the record separator. The nth column is fed to the nth aggregator program via popen; the results are printed as a single record.

Example of how we will run stats:

$ paste <(seq 1 10) <(seq 1 10) <(seq 1 10) | ./stats mean median variance
5.5	5.5	9.166667

Exercise: What are the benefits of this multiple-communicating-programs architecture? What are the drawbacks? Explain.

Exercise: What happens if your columns are different lengths? Are empty cells treated as zero? If so, change the design by altering the stats program to skip empty cells.

Exercise: Explain how you might change the design to permit more than one aggregation of a single column. How would you communicate this to stats with arguments? What logic needs to be changed in stats? Do you need to change the aggregator programs at all?

Exercise: Explain how you might change the design to permit two-column aggregators, for example, integration. How would you communicate this to stats with arguments? What logic needs to be changed in stats?

Exercise: Choose one of these two design changes, and implement it. If you choose the two-column aggregators: the formula for integral is the sum of the expression (after the data is sorted by the first column)

	($1 - prev1) * $2

