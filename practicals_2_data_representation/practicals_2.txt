NUMERICAL REPRESENTATIONS

Exercise: build a list of all four-digit binary numbers, and compute the corresponding single-digit hexadecimal number.
0000 -> 0, 0001 -> 1, 0010 -> 2, 0011 -> 3, 0100 -> 4, 0101 -> 5, 0110 -> 6, 0111 -> 7
1000 -> 8, 1001 -> 9, 1010 -> A, 1011 -> B, 1100 -> C, 1101 -> D, 1110 -> E, 1111 -> F

Exercise: Pretend we use a naïve floating-point format with 5bit mantissa and 3bit exponent (base-2).
What is the smallest possible positive number representable?
What is the largest positive number representable?
The first bit of each is used for sign:
	[±****][±**]
	 ^^^^^  ^^^--- exponent
	   |---------- mantissa
The smallest possible positive number representable: [00001][111]
The largest positive number representable: [01111][011]

Exercise: use python to check this:
from decimal import Decimal
print(repr(Decimal(0.1)))
Result: Decimal('0.1000000000000000055511151231257827021181583404541015625')

Exercise: what is the best approximation of 0.01?
print(repr(Decimal(0.01)))
Result: Decimal('0.01000000000000000020816681711721685132943093776702880859375')

SIMPLE DATA STRUCTURES: LISTS, TREES, GRAPHS

Exercise: use diagrams like the above to explain how to delete an item from a linked list.
1)
---------------       ---------------       ---------------
| x[0] | next |--->---| x[1] | next |--->---| x[2] | NULL | 
---------------       ---------------       ---------------
2)
---------------       ---------------
| x[0] | next |       | x[2] | NULL | 
---------------       ---------------
            \         /
           -----------------
           |  x[1]  | next |
	         -----------------
3)
---------------       ---------------
| x[0] | next |--->---| x[2] | NULL | 
---------------       ---------------
            \         /
           -----------------
           |  x[1]  | next |
	         -----------------
4)
---------------       ---------------
| x[0] | next |--->---| x[1] | NULL | 
---------------       ---------------

Exercise: assemble the numbers 1-10 into binary search trees which are (a) maximally unbalanced to the left, (b) balanced, (c) one step from balanced.
(a) maximally unbalanced to the left
                 10
                 /\
                9 
               /
              8
             /
            7
           /
          6
         /
        5
       /
      4
     /
    3
   /
  2
 /
1

(b) balanced
        5       
     /     \
    3       8
   / \     / \
  2   4   7   9
 /       /     \
1       6       10

(c) one step from balanced.
        5       
     /     \
    3       8
   /       / \
  2       7   9
 /       /     \
1       6       10
       /
      4
      
Exercise: assemble a directed acyclic graph with the numbers 1-12 by strict divisibility: an edge from A to B if B/A is prime.
There are no directed cycles, but some nodes do have multiple paths to them. (These form cycles if you ignore the direction.) Which ones?
Explain how to decide if a number will have multiple paths to it.
The following edges will be get:
1 -> 1; 2 -> 1; 3 -> 1; 4 -> 1,2; 5 -> 1; 6 -> 1,2,3; 7 -> 1; 8 -> 1,2,4; 9 -> 1,3; 10 -> 1,2,5; 11 -> 1; 12 -> 1,2,3,4,6;
To see the graph check out the picture "da_graph.png"
The nodes that will have multiple path to it: 4,6,8,9,10,12.
If we can get a number by several different multiplications it means the node with this number will have several paths to it. Eg.: 12 = 12*1 = 2*6 = 3*4 

Exercise: Identify several maximal spanning trees in the divisibility graph from the previous exercise.
See the following pictures: tree_1.png, tree_2.png, tree_3.png

Exercise: model acquaintance using a graph (vertices are people, an edge between A and B means A knows B). Model it with a directed graph. How are these different?
See the pictures people_graph_1.png, people_graph_2.png
The difference is the following: in case of indirected graph the edge between two people means that they know each other, in case of directed graph the egde shows who knows who.
Eg.: A - B --- A knows B and B knows A
A -> B --- A knows B but B doens't know A

CRYPTOGRAPHIC IDEAS

Exercise: this doesn't mean the file was transferred correctly; why not?
The mistakes in the file may weight the same as the original data. For example, let's look at two words: cat and kat. They have the same length but one spelling is wrong. It's pretty similar idea.

Exercise: do the same for files with "cat" and "cat2" instead of "hi" and "hi2"

Exercise: implement the Caesar cipher in python, which advances each letter of 'M' by 'SEC = n': enc(1, "a") = "b", etc.
import string
def enc(shift, text):
  alphabet = string.ascii_lowercase
  new_alphabet = alphabet[shift:] + alphabet[:shift]
  new_text = text.translate(str.maketrans(alphabet, new_alphabet))
  return new_text
enc(2, 'abc')
'cde'
